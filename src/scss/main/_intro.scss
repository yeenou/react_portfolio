#intro {
  width: 100%; background: #272727; 
  //border: 2px solid red;

  .inner {
    width: 1180px; position: relative; 
    margin: 0px auto; padding: 150px 0px;
    border-left: 2px solid #2d2d2d;
    border-right: 2px solid #2d2d2d;

    h1 {
      font: bold 45px/1 'Oswald'; color: #c5a57c; //#eee; 
      text-align: center; letter-spacing: 8px;
      margin-bottom: 150px; z-index: 5;
    }

    ul {
      width: 100%;  

      li {
        width: 100%; height: 630px; position: relative;
        margin-bottom: 80px; z-index: 2;

        //border: 2px solid hotpink;

        &:last-child{ margin-bottom: 0; }
        &::after{ content:''; display:block; clear:both; } 

        .pic {
          width: calc(100% / 3 * 2); height: 100%; overflow: hidden;
          float: right;

          img {
            width: 100%; height: 100%; object-fit: cover;
          }
        }

        .txt {
          width: 450px; height: 450px; background: #c5a57c;
          position: absolute; left: 0; top: 50%; transform: translateY(-50%);
          padding: 100px 50px;
          z-index: 3;

          //&:nth-of-type(2) { background: #212121; }     // ?? 적용안됨?


          h2{ font: bold 36px/1.2 "Open Sans"; color: #eee; margin-bottom: 10px; }
          span{ font: bold 36px/1.2 "Open Sans"; color: #eee; }
          p{ font: 14px/1.6 "Open Sans"; color: #ddd; margin-top: 30px; }
        }
      }
    }

    &::before{
      content: ''; display: block;
      width: 2px; height: 100%; background: #2d2d2d;
      position: absolute; top: 0; left: calc( 100% / 3 );
    }
    &::after{
      content: ''; display: block;
      width: 2px; height: 100%; background: #2d2d2d;
      position: absolute; top: 0; left: calc( 100% / 3 * 2 );
    }


    // article {
    //   width: 300px; border: 1px solid #ddd; padding: 30px; margin: 0px auto;

    //   path {
    //     fill: transparent;
    //     stroke: #000;
    //     stroke-width: 5;
    //     stroke-dasharray: 1000; //path의 비어있는 공간크기: 빈칸의 크기와 그어지는 선의 크리는 비례해서 증가
    //     stroke-dashoffset: 1000; //가시영역에서의 선의 시작위치
    //     transition: fill 1s 0s, stroke-dashoffset 2s 1s;  
        
    //   }

    //   &:hover {
    //     path{
    //       stroke-dashoffset: 0;  
    //       fill: rgba(0,0,0,.7); 
    //       transition: stroke-dashoffset 2s 0s, fill 1s 2s;    
    //     } 
    //   }
    // }
  }
}


/*
Vector 
-좌표값을 서로 이어서 산술적으로 연산된 그래픽 표현 방법
-장점: 화면 확대,축소시 깨지지 않음
-단점: 선, 면으로 구성되다보니 단순한 형태의 그래픽 위주로 출력

Bitmap
- 픽셀을 조합해서 이미지를 그리는 그래픽 표현 방법
- 장점: 사진같은 풍부한 그래픽을 표현가능
- 단점: 화면을 확대시 계단현상같이 그래픽이 깨짐

SVG (Scalable Vector Graphic) : verctor방식

Canvas : Bitmap 방식
WebGL : 웹에서 3D데이터를 출력하는 라이브러리
Three.js : WebGL 기반으로 3D오브제를 제어해주는 라이브러리
*/